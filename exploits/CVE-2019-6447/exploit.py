
import ast
from dataclasses import dataclass
import requests
import json
import os
import sys
import time
from typing import Any, List


@dataclass
class DirEntry:
    name: str
    time: time.struct_time
    is_file: bool
    size: int


class ExplContext:
    def __init__(self):
        self.ip = ''
        self.curdir = ['storage', 'emulated', '0']

    def _manip_path(self, more: str) -> List[str]:
        """ add more items to path,
        e.g. ['storage'] ** '../mnt/../../../dev/./sda' => ['dev', 'sda'] """
        np = list(self.curdir)
        more = list(filter(lambda x: x not in {'', '.'}, more.split('/')))
        for m in more:
            if m == '..':
                if len(np):
                   np.pop()
            else:
                np.append(m)
        return np

    def _post(self, path: str, cmd: str) -> Any:
        url = 'http://%s:59777%s' % (self.ip, path)
        headers = {'Content-Type' : 'application/json'}
        data = json.dumps({'command': cmd})
        response = requests.post(url, headers=headers, data=data)
        response.encoding = 'utf-8'
        return ast.literal_eval(response.text)

    def _get(self, path: str) -> Any:
        url = 'http://%s:59777%s' % (self.ip, path)
        response = requests.get(url)
        return response

    def d_listdir(self, path: str) -> List[DirEntry]:
        """ retrieve directory data under [path] """
        contents = self._post(path, 'listFiles')
        result = []
        for x in contents:
            # parse time
            _1, _2, _p = x['time'].split(' ')
            _m, _d, _Y = map(int, _1.split('/'))
            _H, _M, _S = map(int, _2.split(':'))
            _Y = _Y + 2000 if _Y < 70 else _Y + 1900
            tm = '%.4d-%.2d-%.2d %.2d:%.2d:%.2d %s' % (
                _Y, _m, _d, _H, _M, _S, _p)
            tm = time.strptime(tm, '%Y-%m-%d %H:%M:%S %p')
            # parse file size
            sz = int(x['size'].split('(')[1].split(' ')[0].replace(',', ''))
            # add to list
            result.append(DirEntry(
                name=x['name'],
                time=tm,
                is_file=x['type'] == 'file',
                size=sz,
            ))
        # sort by folder to name
        result.sort(key=lambda x: (x.is_file, x.name.lower()))
        return result

    def listdir(self):
        curdir = '/'.join([''] + self.curdir)
        try:
            contents = self.d_listdir(curdir)
        except:
            print('ls: unable to access directory')
            return
        # add visual effects
        contents.insert(0, DirEntry(name='.', time=time.localtime(),
                        is_file=False, size=4096))
        contents.insert(1, DirEntry(name='..', time=time.localtime(),
                        is_file=False, size=4096))
        # format lines
        lines: List[List[str]] = []
        for c in contents:
            row = []
            row.append(('-' if c.is_file else 'd') + 'rwxrwxrwx')
            row.append('1')
            row.append('root')
            row.append('root')
            row.append(str(c.size))
            row.append(time.strftime('%b %d %H:%m', c.time))
            row.append(("'%s'" if ' ' in c.name else ' %s') % c.name)
            lines.append(row)
        # adjust padding
        maxlen = [max(map(lambda r: len(r[i]), lines)) for i in range(6)] + [0]
        printres = []
        for l in lines:
            x = [l[i].rjust(maxlen[i]) for i in range(7)]
            printres.append(' '.join(x))
        # show sum
        total = sum(i.size for i in contents)
        print('total %d' % total)
        print('\n'.join(printres))

    def chdir(self, npath):
        if npath.startswith('/'):
            self.curdir = []
        self.curdir = self._manip_path(npath)

    def exec(self, cmd):
        return self._post('/', cmd)

    def pull(self, path):
        npath = '/' + '/'.join(self._manip_path(path))
        print('Downloading "%s"... ' % npath, end='')
        req = self._get(npath)
        filename = path.split('/')[-1]
        with open(filename, 'wb') as f:
            f.write(req.content)
        print('ok')

    def help(self):
        for line in [
            '   open <remote-ip>: connect to remote server',
            '   connect <remote-ip>: alias of open',
            '   close: close current connection',
            '   ls: show contents under current directory',
            '   dir: alias of ls',
            '   cd <relative-path>|<absolute-path>: change cwd to target dir',
            '   chdir <relative-path>|<absolute-path>: alias of cd',
            '   pull <path>: pull file to local machine',
            '   download <path>: alias of pull',
            '   cmd <command>: execute other commands:',
            '       listPics       - list all Pictures',
            '       listVideos     - list all videos',
            '       listAudios     - list all audios',
            '       listApps       - list applications installed',
            '       listAppsSystem - list system apps',
            '       listAppsPhone  - list communication related apps',
            '       listAppsSdcard - list apps on the sdcard',
            '       listAppsAll    - list all applications',
            '   help: show current help',
            '   man: alias of help',
            '   clear: clear console output',
            '   cls: alias of clear',
        ]:
            print(line)
        pass

    def _repl(self):
        cur_ip = self.ip if self.ip else 'localhost'
        print('root@%s:/%s$ ' % (cur_ip, '/'.join(self.curdir)), end='')
        line = input()
        if not line:
            return
        # strip comamnd and options
        cmd, *opt = line.strip().split(' ')
        cmd = cmd.lower()
        opt = ' '.join(opt).strip()
        # connection settings
        if cmd in {'open', 'connect'}:
            self.ip = opt
            print('Set remote device to "%s"' % self.ip)
            return
        if cmd == 'close':
            self.ip = ''
            print('Disconnected with remote device')
            return
        # typical help
        if cmd in {'help', 'man'}:
            self.help()
            return
        if cmd in {'clear', 'cls'}:
            os.system('clear' if 'ix' in os.name else 'cls')
            return
        # further commands require server ip
        if not self.ip:
            print('error: command requires network to function')
            return
        # network commands
        if cmd in {'ls', 'dir'}:
            self.listdir()
            return
        if cmd in {'cd', 'chdir'}:
            self.chdir(opt)
            return
        if cmd in {'pull', 'download'}:
            self.pull(opt)
            return
        if cmd == 'cmd':
            try:
                res = self._post('/', opt)
                print(json.dumps(res, indent=4))
            except:
                print('failed to execute command %s' % opt)
            return
        # command not found
        print('%s: command not found' % cmd)

    def shell(self):
        while True:
            try:
                self._repl()
            except KeyboardInterrupt:
                print('logout')
                break
            except EOFError:
                print('logout')
                break
        pass
    pass


if __name__ == '__main__':
    ec = ExplContext()
    if len(sys.argv) >= 2:
        ec.ip = sys.argv[1]
    ec.shell()
